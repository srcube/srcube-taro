---
description: Implement UI components
alwaysApply: false
---
# UI - Component Development Guide

> Workdir: `packages/ui`

## Workflow

### Generate UI

Generate initial component with `moon g ui` e.g.:
```bash
moon g ui

[ComponentName]
```

## Component Development Standards

### File Organization

1. Each component must be an independent package
2. All component source code in each packageâ€™s src directory.
2. Component file structure must follow these standards:
   - `[component]/src/index.tsx` - Export component and type definitions
   - `[component]src/[component-name].tsx` - Component UI implementation
   - `[component]src/use.ts` - Component logic and hooks
   - `packages/core/theme/[components|layouts]/[component-name].ts` - Style definitions using tailwind-variants

### Code Standards

1. Separate UI and Logic
   - UI-related code in `[component-name].tsx`
   - Business logic in `use.ts`

2. Component Exports
   - Use default export
   - Export component and types in `index.tsx`

3. Style Management
   - Use tailwind-variants for component styles with `@srcube-taro/utils-tv`
   - Style definitions in `packages/core/theme/[components|layouts]/[component-name].ts`
   - Follow TailwindCSS naming conventions

### Best Practices

1. Component Design
   - Follow Adobe React Spectrum design principles
   - Reference HeroUI code style
   - Maintain component independence and reusability

2. Type Definitions
   - Use TypeScript type definitions
   - Export necessary type interfaces
   - Centralize type exports in `index.tsx`

3. Testing
   - Write unit tests for components
   - Test main functionality and edge cases
   - Ensure component accessibility

#### Code Style

- Use adequate line breaks and indentation
- Group related props and logic
- Add comments where necessary
- Boolean props should use a semantic prefix such as `is`, `has`, `should`, or `can` according to their meaning.
   e.g.: `isChecked`(state), `hasIcon`(feature presence), `shouldRender`(conditional action), `canClose`(capability)

#### Code Template

- `use.ts`

```ts
```


### Code References

For implementation details and best practices, refer to the following component folders in `packages/ui` within this project:

- button
- dialog
- drawer
- input
- layouts
- modal
- spinner
